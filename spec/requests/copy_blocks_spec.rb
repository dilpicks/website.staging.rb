# == Schema Information
#
# Table name: copy_blocks
#
#  id               :bigint           not null, primary key
#  created_at       :datetime         not null
#  updated_at       :datetime         not null
#  contentable_type :string           not null
#  contentable_id   :bigint           not null
#  active           :boolean          default(TRUE), not null
#  content          :text
#  classes          :text             default([]), is an Array
#  slug             :string
#
# Indexes
#
#  index_copy_blocks_on_contentable  (contentable_type,contentable_id)
#  index_copy_blocks_on_slug         (slug) UNIQUE
#
require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/copy_blocks", type: :request do
  
  # CopyBlock. As you add validations to CopyBlock, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    skip("Add a hash of attributes valid for your model")
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  describe "GET /index" do
    it "renders a successful response" do
      CopyBlock.create! valid_attributes
      get copy_blocks_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      copy_block = CopyBlock.create! valid_attributes
      get copy_block_url(copy_block)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_copy_block_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      copy_block = CopyBlock.create! valid_attributes
      get edit_copy_block_url(copy_block)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new CopyBlock" do
        expect {
          post copy_blocks_url, params: { copy_block: valid_attributes }
        }.to change(CopyBlock, :count).by(1)
      end

      it "redirects to the created copy_block" do
        post copy_blocks_url, params: { copy_block: valid_attributes }
        expect(response).to redirect_to(copy_block_url(CopyBlock.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new CopyBlock" do
        expect {
          post copy_blocks_url, params: { copy_block: invalid_attributes }
        }.to change(CopyBlock, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post copy_blocks_url, params: { copy_block: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested copy_block" do
        copy_block = CopyBlock.create! valid_attributes
        patch copy_block_url(copy_block), params: { copy_block: new_attributes }
        copy_block.reload
        skip("Add assertions for updated state")
      end

      it "redirects to the copy_block" do
        copy_block = CopyBlock.create! valid_attributes
        patch copy_block_url(copy_block), params: { copy_block: new_attributes }
        copy_block.reload
        expect(response).to redirect_to(copy_block_url(copy_block))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        copy_block = CopyBlock.create! valid_attributes
        patch copy_block_url(copy_block), params: { copy_block: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested copy_block" do
      copy_block = CopyBlock.create! valid_attributes
      expect {
        delete copy_block_url(copy_block)
      }.to change(CopyBlock, :count).by(-1)
    end

    it "redirects to the copy_blocks list" do
      copy_block = CopyBlock.create! valid_attributes
      delete copy_block_url(copy_block)
      expect(response).to redirect_to(copy_blocks_url)
    end
  end
end
